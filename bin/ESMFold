#!/usr/bin/env python
import fire
import torch
import requests
from Bio import SeqIO
from transformers import AutoTokenizer, EsmForProteinFolding
from transformers.models.esm.openfold_utils.protein import to_pdb, Protein as OFProtein
from transformers.models.esm.openfold_utils.feats import atom14_to_atom37


def convert_outputs_to_pdb(outputs):
    final_atom_positions = atom14_to_atom37(outputs["positions"][-1], outputs)
    outputs = {k: v.to("cpu").numpy() for k, v in outputs.items()}
    final_atom_positions = final_atom_positions.cpu().numpy()
    final_atom_mask = outputs["atom37_atom_exists"]
    pdbs = []
    for i in range(outputs["aatype"].shape[0]):
        aa = outputs["aatype"][i]
        pred_pos = final_atom_positions[i]
        mask = final_atom_mask[i]
        resid = outputs["residue_index"][i] + 1
        pred = OFProtein(
            aatype=aa,
            atom_positions=pred_pos,
            atom_mask=mask,
            residue_index=resid,
            b_factors=outputs["plddt"][i],
            chain_index=outputs["chain_index"][i] if "chain_index" in outputs else None,
        )
        pdbs.append(to_pdb(pred))
    return pdbs

def main(input_fa, output_pdb):
    """ESMFold command-line interface.

    Args:
        input_fa: input fasta
        output_pdb: output predicted structure
    """
    input_fa = SeqIO.parse(input_fa, 'fasta')
    input_fa = [str(i.seq) for i in input_fa][0]
    try:
        tokenizer = AutoTokenizer.from_pretrained("facebook/esmfold_v1")
        model = EsmForProteinFolding.from_pretrained("facebook/esmfold_v1", low_cpu_mem_usage=True)
    except requests.exceptions.ProxyError:
        tokenizer = AutoTokenizer.from_pretrained("facebook/esmfold_v1", local_files_only=True)
        model = EsmForProteinFolding.from_pretrained("facebook/esmfold_v1", low_cpu_mem_usage=True, local_files_only=True)
    model = model.cuda()
    # Uncomment to switch the stem to float16
    model.esm = model.esm.half()
    torch.backends.cuda.matmul.allow_tf32 = True
    # Uncomment this line if your GPU memory is 16GB or less, or if you're folding longer (over 600 or so) sequences
    model.trunk.set_chunk_size(64)

    tokenized_input = tokenizer([input_fa], return_tensors="pt", add_special_tokens=False)['input_ids']
    tokenized_input = tokenized_input.cuda()
    
    with torch.no_grad():
        output = model(tokenized_input)

    pdb = convert_outputs_to_pdb(output)
    # print(len(pdb))
    with open(output_pdb, 'w') as f:
        f.write(pdb[0])

if __name__ == '__main__':
    fire.core.Display = lambda lines, out: print(*lines, file=out)
    fire.Fire(main, name='ESMFold')
