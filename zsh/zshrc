source ~/.zprofile
echo -e '\n\n'
echo '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
echo '(~/.zshrc) is sourced @' `hostname` 
echo -e '\tapply @ ~/.my_shell_envs settings for zsh'
echo '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
echo -e '\twelcome to use this zsh env'
echo -e '\tnew features and issues can be raised at:'
echo -e '\thttps://github.com/hermanzhaozzzz/.my_shell_envs/issues'

# ------------------------------------------------------------------->>>>>>>>>>
# platform judgement and var setting
# ------------------------------------------------------------------->>>>>>>>>>
platform="$(uname)"
platform=$(echo $platform | awk -F '_' '{printf $1}')
# Linux / Darwin / MINGW64
echo
HOST=`hostname`
# 设置USER显示
DEFAULT_USER=$USER

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="fino"

# Set list of themes to pick from when loading at random

# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    z
    zsh-syntax-highlighting
    zsh-autosuggestions
)


source $ZSH/oh-my-zsh.sh

# 高亮插件,需要配置在所有插件之后！
source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# TIPS:
# zsh环境优先级
# .zshenv → [.zprofile if login] → [.zshrc if interactive] → [.zlogin if login] → [.zlogout sometimes].
# ------------------------------------------------------------------->>>>>>>>>>
# 基本环境变量
# ------------------------------------------------------------------->>>>>>>>>>
# HomeBrew PATH need to set in ~/.zprofile (on MacOS)

# for tmux
mkdir -p $HOME/.tmux_tmp_dir/$HOST
export TMUX_TMPDIR=$HOME/.tmux_tmp_dir/$HOST
# ------------------------------------------------------------------->>>>>>>>>>
# PATH 环境变量
# ------------------------------------------------------------------->>>>>>>>>>
# 我的可执行文件
export PATH=${HOME}/.my_shell_envs/bin:$PATH
# ------------------------------------------------------------------->>>>>>>>>>
# 自定义函数命令
# ------------------------------------------------------------------->>>>>>>>>>
if [ -z "${TRASH+x}" ]; then  
    TRASH=${HOME}/.mytrash
    if [ ! -d "$TRASH" ] && [ ! -L "$TRASH" ]; then
        echo -e '\t!!!!!ATTENTION!!!!!'
        echo -e '\tnot found var: TRASH in ~/.zprofile'
        echo -e '\tautomatically set TRASH @ '$TRASH
        mkdir -p $TRASH
        echo -e '\tyou can override it by adding `export TRASH=your_trash_path`, the trash folder will be create'
        echo -e '\tOR you need to do nothing if you want to use ~/.mytrash as your default trash folder'
        echo -e '\tthis warning will be shown ONLY ONCE.'
        echo -e '\t!!!!/ATTENTION!!!!!\n\n'
    fi
else
    mkdir -p $TRASH
    echo -e '\tset TRASH @ '$TRASH
fi
# mv命令覆盖rm命令
func_delfile(){
    mv $@ $TRASH/
}
# 保存原始rm命令的路径
alias rm.real.rm=/bin/rm
 
# 定义一个新的rm命令，它调用_del函数
alias rm=func_delfile

# 显示回收站中垃圾清单
func_dellist(){
    # ls -alt $HOME/$TRASH/*
    exa --no-permissions --time-style long-iso -lh --tree -L 1 --no-user $TRASH

}
alias rm.trash.show=func_dellist
# 找回回收站相应文件
func_delback(){
    echo "将执行 mv -i $TRASH/* ./"
    echo "你可以自己写mv命令来恢复文件"
    echo "在那之前，建议执行rm.trash.show来检查垃圾箱的文件"
    echo "是否继续执行 [y/n]"
    read confirm
    if [ ${confirm} = "y" ]; then
        mv -i $TRASH/* ./
    fi
}
alias rm.trash.back=func_delback
# 清空回收站
func_delclear(){
    echo "确认删除回收站所有文件？？？ $TRASH [y/n]"
    read confirm
    if [ ${confirm} = "y"  ] ;then
        /bin/rm -rf $TRASH/* 
        /bin/rm -rf $TRASH/.* 2> /dev/null
        echo "完成"
    fi
}
alias rm.trash.clear=func_delclear
# ------------------------------------------------------------------->>>>>>>>>>
# 自定义alias
# ------------------------------------------------------------------->>>>>>>>>>
# 函数别名
alias btop='btop -lc'


# 第三方命令别名
alias llll="/bin/ls -lh"
alias lll="eza -lh --time-style long-iso"
alias ll="eza -lh --tree -L 1 --no-user --time-style long-iso"
alias lg="eza -lh --tree -L 1 --no-user --time-style long-iso | grep -v 'job.srp' | grep -v '.err' | grep -v '.out'"
alias l="eza -lha --tree -L 1 --time-style long-iso"

if [ -f /proc/version ]; then
    if grep -qEi 'wsl' /proc/version; then
        # for Ubuntu WSL on Windows PC
        echo 'seems you are in wsl'
        echo 'alias open=wslview'
        echo -e '\tsee doc: https://wslutiliti.es/wslu/zh-CN/install.html to install wslview cmd'
        alias open='wslview'
    fi
fi

# ------------------------------------------------------------------->>>>>>>>>>
# Conda | Mamba (Must be at the end)
# ------------------------------------------------------------------->>>>>>>>>>

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'micromamba shell init' !!
if [[ "$platform" == "Darwin" ]]; then
    export MAMBA_EXE="$HOME/micromamba/bin/micromamba";
    export MAMBA_ROOT_PREFIX="$HOME/micromamba";
elif [[ "$platform" == "Linux" ]]; then
    export MAMBA_EXE="$HOME/0.apps/micromamba/bin/micromamba";
    export MAMBA_ROOT_PREFIX="$HOME/0.apps/micromamba";
fi

__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"

if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    echo $platform
    if [[ "$platform" == "Darwin" ]]; then
       if [ -f "$HOME/micromamba/etc/profile.d/micromamba.sh" ]; then
           . "$HOME/micromamba/etc/profile.d/micromamba.sh"
       else
           export  PATH="$HOME/micromamba/bin:$PATH"
       fi
   elif [[ "$platform" == "Linux" ]]; then
       if [ -f "$HOME/0.apps/micromamba/etc/profile.d/micromamba.sh" ]; then
           . "$HOME/0.apps/micromamba/etc/profile.d/micromamba.sh"
       else
           export PATH="$HOME/0.apps/micromamba/bin:$PATH"
       fi
   else
       exit 1
   fi
   # alias micromamba="$MAMBA_EXE"  # Fallback on help from micromamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

eval "$(micromamba shell hook --shell=zsh)"
echo -e '\talias conda=micromamba'
echo -e '\talias mamba=micromamba'
alias conda=micromamba
alias mamba=micromamba
conda deactivate
