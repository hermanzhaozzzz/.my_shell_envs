# RPOXY
# all platform
alias proxy.on='export https_proxy=http://127.0.0.1:8234;export http_proxy=http://127.0.0.1:8234;export all_proxy=socks5://127.0.0.1:8235;export no_proxy="192.168.59.102,192.168.59.103";git config --global http.proxy "socks5://127.0.0.1:8235";git config --global https.proxy "socks5://127.0.0.1:8234"'
alias proxy.off='export https_proxy="";export http_proxy="";export all_proxy="";git config --global --unset https.proxy; git config --global --unset http.proxy'
# ------------------------------------------------------------------->>>>>>>>>>
# surge代理 默认开启
# ------------------------------------------------------------------->>>>>>>>>>
proxy.on



# 设置USER显示
DEFAULT_USER=$USER



# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="agnoster"
ZSH_THEME="fino"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	z
	zsh-syntax-highlighting
	zsh-autosuggestions
)

source $ZSH/oh-my-zsh.sh

# 高亮插件,需要配置在所有插件之后！
source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# TIPS:
# zsh环境优先级
# .zshenv → [.zprofile if login] → [.zshrc if interactive] → [.zlogin if login] → [.zlogout sometimes].
# ------------------------------------------------------------------->>>>>>>>>>
# 基本环境变量
# ------------------------------------------------------------------->>>>>>>>>>
# 需要预设的环境变量： 在zshenv or zsh_profile中完成设置
# 如：
# HOME 变量 (如果是Linux下)
# HomeBrew的PATH (如果是MacOS下)

# ------------------------------------------------------------------->>>>>>>>>>
# PATH 环境变量
# ------------------------------------------------------------------->>>>>>>>>>
# 个人系统命令
export PATH=$PATH:${HOME}/.local/bin
export PATH=$PATH:${HOME}/.cargo/bin
# 我的可执行文件
export PATH=$PATH:${HOME}/.my_shell_envs/bin
export PATH=$PATH:/Library/TeX/texbin
export PATH=$PATH:${HOME}/Library/Application\ Support/JetBrains/Toolbox/scripts
# Bioinformatics
export PATH=$PATH:/Volumes/zhaohn_HD/Bio/0.apps/homer/bin
export PATH=$PATH:$HOME/Bio/0.apps/hisat-3n_allType
export PATH=$PATH:$HOME/Bio/0.apps/meme_suite/meme-5.5.3/bin:$HOME/Bio/0.apps/meme_suite/meme-5.5.3/libexec/meme-5.5.3


# ------------------------------------------------------------------->>>>>>>>>>
# 软件环境变量
# ------------------------------------------------------------------->>>>>>>>>>
# for rust
. "$HOME/.cargo/env"

# for R
unset R_HOME

# for tmux
export TMUX_TMPDIR=$HOME/.tmux_tmp_dir

# ------------------------------------------------------------------->>>>>>>>>>
# 自定义函数命令
# ------------------------------------------------------------------->>>>>>>>>>
# mv命令覆盖rm命令
func_delfile(){
    # 检查$HOME/Trash/是否存在
    if [ ! -d "$HOME/Trash/" ]; then
        echo "Trash directory does not exist!"
        echo "Please run `mkdir -p $HOME/Trash` to create this folder!"
        return 1
    fi

    # 循环遍历每个参数，并将它们移动到Trash目录
    for arg in "$@"; do
        mv "$arg" "$HOME/Trash/"
    done
}

# 保存原始rm命令的路径
alias rm.real.rm=/bin/rm
 
# 定义一个新的rm命令，它调用_del函数
alias rm=func_delfile

# 显示回收站中垃圾清单
func_dellist(){
    # ls -alt $HOME/Trash/*
    exa --no-permissions --time-style long-iso -lh --tree -L 1 --no-user $HOME/Trash

}
alias rm.trash.show=func_dellist
# 找回回收站相应文件
func_delback(){
    echo "将执行 mv -i $HOME/Trash/* ./"
    echo "你可以自己写mv命令来恢复文件"
    echo "在那之前，建议执行rm.trash.show来检查垃圾箱的文件"
    echo "是否继续执行 [y/n]"
    read confirm
    if [ ${confirm} = "y" ]; then
        mv -i $HOME/Trash/* ./
    fi
}
alias rm.trash.back=func_delback
# 清空回收站
func_delclear(){
    echo "确认删除回收站所有文件？？？ ~/Trash [y/n]"
    read confirm
    if [ ${confirm} = "y"  ] ;then
        /bin/rm -rf ~/Trash/* 
        /bin/rm -rf ~/Trash/.* 2> /dev/null
        echo "完成"
    fi
}
alias rm.trash.clear=func_delclear
# 开启反向代理隧道
func_ssh.tunnels.on(){
    # 设置SSH隧道
    ssh -fCNL 11283:localhost:11282 zhaohuanan@162.105.250.169
    ssh -fCNL 16007:localhost:9900 zhaohuanan@162.105.250.169
    ssh -fCNL 11283:localhost:11282 zhaohuanan@zhaohuanan.cc
    ssh -fCNL 16007:localhost:9900 zhaohuanan@zhaohuanan.cc
    echo "隧道已建立"
}
alias ssh.tunnels.on=func_ssh.tunnels.on
# 关闭反向代理隧道
func_ssh.tunnels.off(){
    # 清理SSH隧道
    tunnels=`ps -ef | grep zhaohuanan | grep ssh | grep localhost`
    echo "将清理以下隧道"
    echo $tunnels
    echo $tunnels | awk '{print "kill -9 "$2}' | sh
    echo "SSH隧道清理完成。"
}
alias ssh.tunnels.off=func_ssh.tunnels.off
# ------------------------------------------------------------------->>>>>>>>>>
# 自定义alias
# ------------------------------------------------------------------->>>>>>>>>>
# 函数别名


# 内置命令别名
alias ssh.server.veteran="ssh zhaohuanan@162.105.250.207"
alias ssh.server.bioin="ssh zhaohuanan@bioin.vip -p 10006"
alias ssh.server.polaris="ssh chengqiyi_zhn@10.100.1.88"
alias zcat="gunzip -d -c"  # fix zcat

# 第三方命令别名
alias llll="/bin/ls -lh"
alias lll="exa -lh --time-style long-iso"
alias ll="exa -lh --tree -L 1 --no-user --time-style long-iso"
alias l="exa -lha --tree -L 1 --time-style long-iso"

alias startsc="open -a DPSafeConnect.app 2> /dev/null || open -a SafeConnect 2> /dev/null && open -a Step\ Two.app"
alias opena="open -a Sublime\ Text"
alias code="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"
alias v="neovide"

# Bioinformatic tools
alias checkbam="for i in *.bam ;do (samtools quickcheck \$i && echo \"ok    \" \$i || echo \"error    \" \$i);done"

# ------------------------------------------------------------------->>>>>>>>>>
# Conda doc for MacOS arm64!!!!!
# ------------------------------------------------------------------->>>>>>>>>>
# # for arm64 macos
# URL=https://micro.mamba.pm/api/micromamba/osx-arm64/latest
# # for x86_64 macos
# URL=https://micro.mamba.pm/api/micromamba/osx-64/latest

# ROOT_PATH=$HOME/micromamba
# mkdir $ROOT_PATH
# cd $ROOT_PATH
# curl -Ls $URL | tar -xvj bin/micromamba
# cd bin
# ./micromamba shell init -s zsh -p $ROOT_PATH
#############################
# for arm64
alias conda_rosetta_echo='\
echo "CONDA_SUBDIR=osx-64 conda create -n rosetta_env conda python\n# ↑↑↑python_version conda is needed↑↑↑\n# <conda install conda> in the rosetta_env is the best choice\n# when alias micromamba as conda\n\nconda activate rosetta_env\n\n/path_of_python_version/conda env config vars set CONDA_SUBDIR=osx-64\n# ↑↑↑python_version conda is needed for setting CONDA_SUBDIR var↑↑↑\n\nconda deactivate\\nconda activate rosetta_env\n\npython -c \"import platform;print(platform.machine())\"  \n# should output x86_64"\
'

# ------------------------------------------------------------------->>>>>>>>>>
# Conda | Mamba (Must be at the end)
# ------------------------------------------------------------------->>>>>>>>>>
alias conda=micromamba
alias mamba=micromamba
# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE="$HOME/micromamba/bin/micromamba";
export MAMBA_ROOT_PREFIX="$HOME/micromamba";
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    if [ -f "$HOME/micromamba/etc/profile.d/micromamba.sh" ]; then
        . "$HOME/micromamba/etc/profile.d/micromamba.sh"
    else
        export  PATH="$HOME/micromamba/bin:$PATH"  # extra space after export prevents interference from conda init
    fi
fi
unset __mamba_setup
# <<< mamba initialize <<<

conda activate base
